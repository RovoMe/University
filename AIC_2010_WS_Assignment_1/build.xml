<project name="AIC 2010 WS Assignment 1: OrderProcessing" default="dist" basedir=".">
	<description>
		Buil file for "Advanced Internet Computing" Assignment 1
	</description>
	<!-- set global properties for this build -->
	<property name="src.dir" location="src"/>
	<property name="build.dir" location="bin"/>
	<property name="ressource.dir" location="ressources"/>
	<property name="lib.dir" location="lib"/>
	<property name="dist.dir" location="dist"/>
	
<!--
	******************************************************************
	* Init target - sets up the project environment                  *
	******************************************************************
-->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directoryy structure used by compile -->
		<mkdir dir="${build.dir}"/>
	</target>
<!--
	******************************************************************
	* XJC - to transform .xsd-schema files into .java-classes        *
	******************************************************************
--><!--
	There is currently somekind of bug that the transformation from
	a schema file into java-classes in case of the addressing.xsd we
	are in need of, fails due to a NoSuchMethodException.
-->
	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
	  <classpath>
	    <fileset dir="${lib.dir}" includes="*.jar" />
	  </classpath>
	</taskdef>

	<!-- xjc -d src ressources/addressing.xsd -->
	
	<target name="generate-runtime-artifacts" depends="init" description="generates all files required by the application">
		<xjc destdir="${src.dir}" removeOldOutput="yes" extension="yes">
			<schema dir="${ressource.dir}" includes="addressing.xsd"/>
			<depends dir="${ressource.dir}" includes="*.xsd"/>
			<produces dir="${src.dir}" includes="*.java"/>
			<arg value="-verbose" />
		</xjc>
	</target> 

	<!-- <target name="compile" depends="generate-runtime-artifacts" description="compile the source">-->

<!--
	******************************************************************
	* xjc target - creates needed java-files based on a .xsd-schema  *
	******************************************************************
-->
	<target name="xjc" depends="init" description="generates required stub-files">
		<exec executable="xjc" dir="${src.dir}/">
		<arg value="${ressource.dir}/addressing.xsd"/>
		</exec>
	</target> 
	
<!--
	******************************************************************
	* compile target - neccessary to compile our classes             *
	******************************************************************
-->
	<target name="compile" depends="init" description="compile the source">
		<path>
			<pathelement path="${classpath}"/>
			<fileset dir="${lib.dir}">
				<include name="**/*.jar"/>
			</fileset>
			<pathelement location="classes"/>
		</path>
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false"/>
	</target>
	
<!--
	******************************************************************
	* distribution target - creates a .zip-bundle for our assignment *
	******************************************************************
-->
	<target name="dist" depends="compile" description="generate the distribution-file">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist.dir}/lib"/>
		<!-- Put everything in ${build} into the Gruppe020-${DSTAMP}.zip file -->
		<jar jarfile="${dist.dir}/lib/Gruppe020-${DSTAMP}.zip" basedir="${build.dir}"/>
	</target>

<!--
	******************************************************************
	* run-services target - starter for our services                 *
	******************************************************************
-->
	<target name="run-services" depends="compile" description="Starts all services on the server-side">
		<java forke="true"/>
	</target>

<!--
	******************************************************************
	* run-client target - starts the testing environment             *
	******************************************************************
-->
	<target name="run-client" depends="run-services" description="Starts the testing environment">
		<junit />
	</target>

<!--
	******************************************************************
	* clean target - cleansup the project, removing classes and so on*
	******************************************************************
-->
	<target name="clean" description="clean up">
	<delete dir="${build}"/>
	<delete dir="${dist}"/>
	</target>
</project>
