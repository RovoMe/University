/*
* generated by Xtext
*/
grammar InternalSOOMLDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.ac.tuwien.big.me.sw11.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.ac.tuwien.big.me.sw11.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.ac.tuwien.big.me.sw11.services.SOOMLDslGrammarAccess;

}

@parser::members {

 	private SOOMLDslGrammarAccess grammarAccess;
 	
    public InternalSOOMLDslParser(TokenStream input, SOOMLDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Pkg";	
   	}
   	
   	@Override
   	protected SOOMLDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePkg
entryRulePkg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPkgRule()); }
	 iv_rulePkg=rulePkg 
	 { $current=$iv_rulePkg.current; } 
	 EOF 
;

// Rule Pkg
rulePkg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPkgAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPkgAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPkgRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPkgAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPkgAccess().getClassesClsParserRuleCall_3_0_0()); 
	    }
		lv_classes_3_0=ruleCls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPkgRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_3_0, 
        		"Cls");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPkgAccess().getClassesClsParserRuleCall_3_1_0()); 
	    }
		lv_classes_4_0=ruleCls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPkgRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_4_0, 
        		"Cls");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getPkgAccess().getPackagesPkgParserRuleCall_4_0_0()); 
	    }
		lv_packages_5_0=rulePkg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPkgRule());
	        }
       		add(
       			$current, 
       			"packages",
        		lv_packages_5_0, 
        		"Pkg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPkgAccess().getPackagesPkgParserRuleCall_4_1_0()); 
	    }
		lv_packages_6_0=rulePkg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPkgRule());
	        }
       		add(
       			$current, 
       			"packages",
        		lv_packages_6_0, 
        		"Pkg");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPkgAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleCls
entryRuleCls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClsRule()); }
	 iv_ruleCls=ruleCls 
	 { $current=$iv_ruleCls.current; } 
	 EOF 
;

// Rule Cls
ruleCls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClsAccess().getClassKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClsAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClsRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClsAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getClsAccess().getFeaturesStructFeatParserRuleCall_3_0_0()); 
	    }
		lv_features_3_0=ruleStructFeat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClsRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"StructFeat");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClsAccess().getFeaturesStructFeatParserRuleCall_3_1_0()); 
	    }
		lv_features_4_0=ruleStructFeat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClsRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_4_0, 
        		"StructFeat");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getClsAccess().getOperationsOpParserRuleCall_4_0_0()); 
	    }
		lv_operations_5_0=ruleOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClsRule());
	        }
       		add(
       			$current, 
       			"operations",
        		lv_operations_5_0, 
        		"Op");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClsAccess().getOperationsOpParserRuleCall_4_1_0()); 
	    }
		lv_operations_6_0=ruleOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClsRule());
	        }
       		add(
       			$current, 
       			"operations",
        		lv_operations_6_0, 
        		"Op");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClsAccess().getStateMachineStMachParserRuleCall_5_0()); 
	    }
		lv_stateMachine_7_0=ruleStMach		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClsRule());
	        }
       		set(
       			$current, 
       			"stateMachine",
        		lv_stateMachine_7_0, 
        		"StMach");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClsAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleStructFeat
entryRuleStructFeat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructFeatRule()); }
	 iv_ruleStructFeat=ruleStructFeat 
	 { $current=$iv_ruleStructFeat.current; } 
	 EOF 
;

// Rule StructFeat
ruleStructFeat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStructFeatAccess().getAttrParserRuleCall_0()); 
    }
    this_Attr_0=ruleAttr
    { 
        $current = $this_Attr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructFeatAccess().getRefParserRuleCall_1()); 
    }
    this_Ref_1=ruleRef
    { 
        $current = $this_Ref_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttr
entryRuleAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrRule()); }
	 iv_ruleAttr=ruleAttr 
	 { $current=$iv_ruleAttr.current; } 
	 EOF 
;

// Rule Attr
ruleAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='att' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttrAccess().getAttKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAccess().getDataTypeDTypeEnumRuleCall_1_0()); 
	    }
		lv_dataType_1_0=ruledType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_1_0, 
        		"dType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttrAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAccess().getLowerBoundEIntParserRuleCall_3_1_0()); 
	    }
		lv_lowerBound_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='..' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttrAccess().getFullStopFullStopKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAccess().getUpperBoundEIntParserRuleCall_3_3_0()); 
	    }
		lv_upperBound_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAttrAccess().getRightParenthesisKeyword_3_4());
    }
)?)
;





// Entry rule entryRuleRef
entryRuleRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefRule()); }
	 iv_ruleRef=ruleRef 
	 { $current=$iv_ruleRef.current; } 
	 EOF 
;

// Rule Ref
ruleRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ref' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRefAccess().getRefKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRefAccess().getTypeClassCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRefAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRefAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRefAccess().getLowerBoundEIntParserRuleCall_4_0()); 
	    }
		lv_lowerBound_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='..' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRefAccess().getFullStopFullStopKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRefAccess().getUpperBoundEIntParserRuleCall_6_0()); 
	    }
		lv_upperBound_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRefAccess().getRightParenthesisKeyword_7());
    }
(	otherlv_8='oppositeOf' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRefAccess().getOppositeOfKeyword_8_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getRefAccess().getOppositeReferenceCrossReference_8_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleOp
entryRuleOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpRule()); }
	 iv_ruleOp=ruleOp 
	 { $current=$iv_ruleOp.current; } 
	 EOF 
;

// Rule Op
ruleOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='op' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpAccess().getOpKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOpAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOpAccess().getParameterParamParserRuleCall_3_0_0()); 
	    }
		lv_parameter_3_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_3_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOpAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpAccess().getParameterParamParserRuleCall_3_1_1_0()); 
	    }
		lv_parameter_5_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOpAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getDataTypeDTypeEnumRuleCall_0_0()); 
	    }
		lv_dataType_0_0=ruledType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_0_0, 
        		"dType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getParamAccess().getClassTypeClassCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStMach
entryRuleStMach returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStMachRule()); }
	 iv_ruleStMach=ruleStMach 
	 { $current=$iv_ruleStMach.current; } 
	 EOF 
;

// Rule StMach
ruleStMach returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='stateMachine' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStMachAccess().getStateMachineKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStMachAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStMachAccess().getStatesSteParserRuleCall_2_0()); 
	    }
		lv_states_2_0=ruleSte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStMachRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_2_0, 
        		"Ste");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStMachAccess().getStatesSteParserRuleCall_3_0()); 
	    }
		lv_states_3_0=ruleSte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStMachRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"Ste");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStMachAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStMachRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getStMachAccess().getInitialStateStateCrossReference_5_0()); 
	}

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStMachAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleSte
entryRuleSte returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSteRule()); }
	 iv_ruleSte=ruleSte 
	 { $current=$iv_ruleSte.current; } 
	 EOF 
;

// Rule Ste
ruleSte returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='state' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSteAccess().getStateKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSteAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSteRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='onEntryCall' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSteAccess().getOnEntryCallKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSteAccess().getEntryOperationEntOpParserRuleCall_2_1_0()); 
	    }
		lv_entryOperation_3_0=ruleEntOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSteRule());
	        }
       		set(
       			$current, 
       			"entryOperation",
        		lv_entryOperation_3_0, 
        		"EntOp");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSteAccess().getLeftCurlyBracketKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSteAccess().getTransitionsTransParserRuleCall_4_0_0()); 
	    }
		lv_transitions_5_0=ruleTrans		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSteRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_5_0, 
        		"Trans");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSteAccess().getTransitionsTransParserRuleCall_4_1_0()); 
	    }
		lv_transitions_6_0=ruleTrans		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSteRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_6_0, 
        		"Trans");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSteAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEntOp
entryRuleEntOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntOpRule()); }
	 iv_ruleEntOp=ruleEntOp 
	 { $current=$iv_ruleEntOp.current; } 
	 EOF 
;

// Rule EntOp
ruleEntOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntOpRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEntOpAccess().getCalledOperationOperationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleTrans
entryRuleTrans returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransRule()); }
	 iv_ruleTrans=ruleTrans 
	 { $current=$iv_ruleTrans.current; } 
	 EOF 
;

// Rule Trans
ruleTrans returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransAccess().getEventEvParserRuleCall_0_0()); 
	    }
		lv_event_0_0=ruleEv		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_0_0, 
        		"Ev");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTransAccess().getTargetStateCrossReference_2_0()); 
	}

)
)(	otherlv_3='unless' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransAccess().getUnlessKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransAccess().getGuardGuadParserRuleCall_3_1_0()); 
	    }
		lv_guard_4_0=ruleGuad		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_4_0, 
        		"Guad");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransAccess().getLeftCurlyBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransAccess().getActionsActParserRuleCall_4_1_0()); 
	    }
		lv_actions_6_0=ruleAct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_6_0, 
        		"Act");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransAccess().getActionsActParserRuleCall_4_2_0()); 
	    }
		lv_actions_7_0=ruleAct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_7_0, 
        		"Act");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransAccess().getRightCurlyBracketKeyword_4_3());
    }
)?)
;





// Entry rule entryRuleEv
entryRuleEv returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvRule()); }
	 iv_ruleEv=ruleEv 
	 { $current=$iv_ruleEv.current; } 
	 EOF 
;

// Rule Ev
ruleEv returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEvAccess().getOperationOperationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleGuad
entryRuleGuad returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuadRule()); }
	 iv_ruleGuad=ruleGuad 
	 { $current=$iv_ruleGuad.current; } 
	 EOF 
;

// Rule Guad
ruleGuad returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGuadAccess().getRefInStateCondParserRuleCall_0()); 
    }
    this_refInStateCond_0=rulerefInStateCond
    { 
        $current = $this_refInStateCond_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGuadAccess().getParamInStateCondParserRuleCall_1()); 
    }
    this_paramInStateCond_1=ruleparamInStateCond
    { 
        $current = $this_paramInStateCond_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAct
entryRuleAct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActRule()); }
	 iv_ruleAct=ruleAct 
	 { $current=$iv_ruleAct.current; } 
	 EOF 
;

// Rule Act
ruleAct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActAccess().getCRefOpActParserRuleCall_0()); 
    }
    this_cRefOpAct_0=rulecRefOpAct
    { 
        $current = $this_cRefOpAct_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActAccess().getCParamOpActParserRuleCall_1()); 
    }
    this_cParamOpAct_1=rulecParamOpAct
    { 
        $current = $this_cParamOpAct_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActAccess().getRefAssActParserRuleCall_2()); 
    }
    this_refAssAct_2=rulerefAssAct
    { 
        $current = $this_refAssAct_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulecRefOpAct
entryRulecRefOpAct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCRefOpActRule()); }
	 iv_rulecRefOpAct=rulecRefOpAct 
	 { $current=$iv_rulecRefOpAct.current; } 
	 EOF 
;

// Rule cRefOpAct
rulecRefOpAct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='self' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCRefOpActAccess().getSelfKeyword_0());
    }
	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCRefOpActAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCRefOpActRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getCRefOpActAccess().getCallObjectViaReferenceReferenceCrossReference_2_0()); 
	}

)
)	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCRefOpActAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCRefOpActRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getCRefOpActAccess().getCalledOperationOperationCrossReference_4_0()); 
	}

)
)(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCRefOpActAccess().getLeftParenthesisKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCRefOpActAccess().getParameterParamBindParserRuleCall_5_1_0()); 
	    }
		lv_parameter_6_0=ruleParamBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCRefOpActRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_6_0, 
        		"ParamBind");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCRefOpActAccess().getCommaKeyword_5_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCRefOpActAccess().getParameterParamBindParserRuleCall_5_2_1_0()); 
	    }
		lv_parameter_8_0=ruleParamBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCRefOpActRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_8_0, 
        		"ParamBind");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCRefOpActAccess().getRightParenthesisKeyword_5_3());
    }
)?	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCRefOpActAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRulecParamOpAct
entryRulecParamOpAct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCParamOpActRule()); }
	 iv_rulecParamOpAct=rulecParamOpAct 
	 { $current=$iv_rulecParamOpAct.current; } 
	 EOF 
;

// Rule cParamOpAct
rulecParamOpAct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCParamOpActRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getCParamOpActAccess().getCallObjectViaParameterParameterCrossReference_0_0()); 
	}

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCParamOpActAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCParamOpActRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getCParamOpActAccess().getCalledOperationOperationCrossReference_2_0()); 
	}

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCParamOpActAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCParamOpActAccess().getParameterParamBindParserRuleCall_3_1_0()); 
	    }
		lv_parameter_4_0=ruleParamBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCParamOpActRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"ParamBind");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCParamOpActAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCParamOpActAccess().getParameterParamBindParserRuleCall_3_2_1_0()); 
	    }
		lv_parameter_6_0=ruleParamBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCParamOpActRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_6_0, 
        		"ParamBind");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCParamOpActAccess().getRightParenthesisKeyword_3_3());
    }
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCParamOpActAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulerefAssAct
entryRulerefAssAct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefAssActRule()); }
	 iv_rulerefAssAct=rulerefAssAct 
	 { $current=$iv_rulerefAssAct.current; } 
	 EOF 
;

// Rule refAssAct
rulerefAssAct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='self' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRefAssActAccess().getSelfKeyword_0());
    }
	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRefAssActAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefAssActRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRefAssActAccess().getReferenceReferenceCrossReference_2_0()); 
	}

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRefAssActAccess().getEqualsSignKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefAssActRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getRefAssActAccess().getParameterParameterCrossReference_4_0()); 
	}

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRefAssActAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleParamBind
entryRuleParamBind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamBindRule()); }
	 iv_ruleParamBind=ruleParamBind 
	 { $current=$iv_ruleParamBind.current; } 
	 EOF 
;

// Rule ParamBind
ruleParamBind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamBindRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParamBindAccess().getParameterBindingParameterCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamBindAccess().getEqualsSignKeyword_1());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamBindRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getParamBindAccess().getStructuralFeatureBindingStructuralFeatureCrossReference_2_0_0()); 
	}

)
)
    |	otherlv_3='self' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParamBindAccess().getSelfKeyword_2_1());
    }
))
;





// Entry rule entryRulerefInStateCond
entryRulerefInStateCond returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefInStateCondRule()); }
	 iv_rulerefInStateCond=rulerefInStateCond 
	 { $current=$iv_rulerefInStateCond.current; } 
	 EOF 
;

// Rule refInStateCond
rulerefInStateCond returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='self' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRefInStateCondAccess().getSelfKeyword_0());
    }
	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRefInStateCondAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefInStateCondRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRefInStateCondAccess().getReferenceReferenceCrossReference_2_0()); 
	}

)
)	otherlv_3='inState' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRefInStateCondAccess().getInStateKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefInStateCondRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getRefInStateCondAccess().getInStateStateCrossReference_4_0()); 
	}

)
))
;





// Entry rule entryRuleparamInStateCond
entryRuleparamInStateCond returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamInStateCondRule()); }
	 iv_ruleparamInStateCond=ruleparamInStateCond 
	 { $current=$iv_ruleparamInStateCond.current; } 
	 EOF 
;

// Rule paramInStateCond
ruleparamInStateCond returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamInStateCondRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParamInStateCondAccess().getParameterParameterCrossReference_0_0()); 
	}

)
)	otherlv_1='inState' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamInStateCondAccess().getInStateKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamInStateCondRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getParamInStateCondAccess().getInStateStateCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule dType
ruledType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='String' 
	{
        $current = grammarAccess.getDTypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDTypeAccess().getStringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Integer' 
	{
        $current = grammarAccess.getDTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDTypeAccess().getIntegerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Boolean' 
	{
        $current = grammarAccess.getDTypeAccess().getBooleanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDTypeAccess().getBooleanEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Complex Class' 
	{
        $current = grammarAccess.getDTypeAccess().getComplexEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDTypeAccess().getComplexEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


