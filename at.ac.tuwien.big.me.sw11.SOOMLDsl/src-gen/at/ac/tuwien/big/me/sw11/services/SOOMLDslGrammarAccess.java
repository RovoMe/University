/*
* generated by Xtext
*/

package at.ac.tuwien.big.me.sw11.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SOOMLDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PkgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pkg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cClassesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cClassesClsParserRuleCall_3_0_0 = (RuleCall)cClassesAssignment_3_0.eContents().get(0);
		private final Assignment cClassesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassesClsParserRuleCall_3_1_0 = (RuleCall)cClassesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPackagesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPackagesPkgParserRuleCall_4_0_0 = (RuleCall)cPackagesAssignment_4_0.eContents().get(0);
		private final Assignment cPackagesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPackagesPkgParserRuleCall_4_1_0 = (RuleCall)cPackagesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// * **************************************************************************** * /
		//
		/// *                      S T R U C T U R E   M O D E L                           * /
		//
		/// * **************************************************************************** * / Pkg returns Package:
		//
		//	"package" name=EString "{" (classes+=Cls classes+=Cls*)? (packages+=Pkg packages+=Pkg*)? "}";
		public ParserRule getRule() { return rule; }

		//"package" name=EString "{" (classes+=Cls classes+=Cls*)? (packages+=Pkg packages+=Pkg*)? "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(classes+=Cls classes+=Cls*)?
		public Group getGroup_3() { return cGroup_3; }

		//classes+=Cls
		public Assignment getClassesAssignment_3_0() { return cClassesAssignment_3_0; }

		//Cls
		public RuleCall getClassesClsParserRuleCall_3_0_0() { return cClassesClsParserRuleCall_3_0_0; }

		//classes+=Cls*
		public Assignment getClassesAssignment_3_1() { return cClassesAssignment_3_1; }

		//Cls
		public RuleCall getClassesClsParserRuleCall_3_1_0() { return cClassesClsParserRuleCall_3_1_0; }

		//(packages+=Pkg packages+=Pkg*)?
		public Group getGroup_4() { return cGroup_4; }

		//packages+=Pkg
		public Assignment getPackagesAssignment_4_0() { return cPackagesAssignment_4_0; }

		//Pkg
		public RuleCall getPackagesPkgParserRuleCall_4_0_0() { return cPackagesPkgParserRuleCall_4_0_0; }

		//packages+=Pkg*
		public Assignment getPackagesAssignment_4_1() { return cPackagesAssignment_4_1; }

		//Pkg
		public RuleCall getPackagesPkgParserRuleCall_4_1_0() { return cPackagesPkgParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ClsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFeaturesStructFeatParserRuleCall_3_0_0 = (RuleCall)cFeaturesAssignment_3_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeaturesStructFeatParserRuleCall_3_1_0 = (RuleCall)cFeaturesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOperationsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOperationsOpParserRuleCall_4_0_0 = (RuleCall)cOperationsAssignment_4_0.eContents().get(0);
		private final Assignment cOperationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationsOpParserRuleCall_4_1_0 = (RuleCall)cOperationsAssignment_4_1.eContents().get(0);
		private final Assignment cStateMachineAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStateMachineStMachParserRuleCall_5_0 = (RuleCall)cStateMachineAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Cls returns Class:
		//
		//	"class" name=EString "{" (features+=StructFeat features+=StructFeat*)? (operations+=Op operations+=Op*)?
		//
		//	stateMachine=StMach "}";
		public ParserRule getRule() { return rule; }

		//"class" name=EString "{" (features+=StructFeat features+=StructFeat*)? (operations+=Op operations+=Op*)?
		//
		//stateMachine=StMach "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(features+=StructFeat features+=StructFeat*)?
		public Group getGroup_3() { return cGroup_3; }

		//features+=StructFeat
		public Assignment getFeaturesAssignment_3_0() { return cFeaturesAssignment_3_0; }

		//StructFeat
		public RuleCall getFeaturesStructFeatParserRuleCall_3_0_0() { return cFeaturesStructFeatParserRuleCall_3_0_0; }

		//features+=StructFeat*
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }

		//StructFeat
		public RuleCall getFeaturesStructFeatParserRuleCall_3_1_0() { return cFeaturesStructFeatParserRuleCall_3_1_0; }

		//(operations+=Op operations+=Op*)?
		public Group getGroup_4() { return cGroup_4; }

		//operations+=Op
		public Assignment getOperationsAssignment_4_0() { return cOperationsAssignment_4_0; }

		//Op
		public RuleCall getOperationsOpParserRuleCall_4_0_0() { return cOperationsOpParserRuleCall_4_0_0; }

		//operations+=Op*
		public Assignment getOperationsAssignment_4_1() { return cOperationsAssignment_4_1; }

		//Op
		public RuleCall getOperationsOpParserRuleCall_4_1_0() { return cOperationsOpParserRuleCall_4_1_0; }

		//stateMachine=StMach
		public Assignment getStateMachineAssignment_5() { return cStateMachineAssignment_5; }

		//StMach
		public RuleCall getStateMachineStMachParserRuleCall_5_0() { return cStateMachineStMachParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StructFeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructFeat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StructFeat returns StructuralFeature:
		//
		//	Attr | Ref;
		public ParserRule getRule() { return rule; }

		//Attr | Ref
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attr
		public RuleCall getAttrParserRuleCall_0() { return cAttrParserRuleCall_0; }

		//Ref
		public RuleCall getRefParserRuleCall_1() { return cRefParserRuleCall_1; }
	}

	public class AttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataTypeDTypeEnumRuleCall_1_0 = (RuleCall)cDataTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLowerBoundAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_3_1_0 = (RuleCall)cLowerBoundAssignment_3_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_3_3_0 = (RuleCall)cUpperBoundAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Attr returns Attribute:
		//
		//	"att" dataType=dType name=EString ("(" lowerBound=EInt ".." upperBound=EInt ")")?;
		public ParserRule getRule() { return rule; }

		//"att" dataType=dType name=EString ("(" lowerBound=EInt ".." upperBound=EInt ")")?
		public Group getGroup() { return cGroup; }

		//"att"
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }

		//dataType=dType
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//dType
		public RuleCall getDataTypeDTypeEnumRuleCall_1_0() { return cDataTypeDTypeEnumRuleCall_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("(" lowerBound=EInt ".." upperBound=EInt ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_3_1() { return cLowerBoundAssignment_3_1; }

		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_3_1_0() { return cLowerBoundEIntParserRuleCall_3_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_2() { return cFullStopFullStopKeyword_3_2; }

		//upperBound=EInt
		public Assignment getUpperBoundAssignment_3_3() { return cUpperBoundAssignment_3_3; }

		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_3_3_0() { return cUpperBoundEIntParserRuleCall_3_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeClassCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLowerBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLowerBoundEIntParserRuleCall_4_0 = (RuleCall)cLowerBoundAssignment_4.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpperBoundAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpperBoundEIntParserRuleCall_6_0 = (RuleCall)cUpperBoundAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOppositeOfKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOppositeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cOppositeReferenceCrossReference_8_1_0 = (CrossReference)cOppositeAssignment_8_1.eContents().get(0);
		private final RuleCall cOppositeReferenceIDTerminalRuleCall_8_1_0_1 = (RuleCall)cOppositeReferenceCrossReference_8_1_0.eContents().get(1);
		
		//Ref returns Reference:
		//
		//	"ref" type=[Class] name=EString "(" lowerBound=EInt ".." upperBound=EInt ")" ("oppositeOf" opposite=[Reference])?;
		public ParserRule getRule() { return rule; }

		//"ref" type=[Class] name=EString "(" lowerBound=EInt ".." upperBound=EInt ")" ("oppositeOf" opposite=[Reference])?
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//type=[Class]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Class]
		public CrossReference getTypeClassCrossReference_1_0() { return cTypeClassCrossReference_1_0; }

		//ID
		public RuleCall getTypeClassIDTerminalRuleCall_1_0_1() { return cTypeClassIDTerminalRuleCall_1_0_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_4() { return cLowerBoundAssignment_4; }

		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_4_0() { return cLowerBoundEIntParserRuleCall_4_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_5() { return cFullStopFullStopKeyword_5; }

		//upperBound=EInt
		public Assignment getUpperBoundAssignment_6() { return cUpperBoundAssignment_6; }

		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_6_0() { return cUpperBoundEIntParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//("oppositeOf" opposite=[Reference])?
		public Group getGroup_8() { return cGroup_8; }

		//"oppositeOf"
		public Keyword getOppositeOfKeyword_8_0() { return cOppositeOfKeyword_8_0; }

		//opposite=[Reference]
		public Assignment getOppositeAssignment_8_1() { return cOppositeAssignment_8_1; }

		//[Reference]
		public CrossReference getOppositeReferenceCrossReference_8_1_0() { return cOppositeReferenceCrossReference_8_1_0; }

		//ID
		public RuleCall getOppositeReferenceIDTerminalRuleCall_8_1_0_1() { return cOppositeReferenceIDTerminalRuleCall_8_1_0_1; }
	}

	public class OpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParameterParamParserRuleCall_3_0_0 = (RuleCall)cParameterAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterParamParserRuleCall_3_1_1_0 = (RuleCall)cParameterAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Op returns Operation:
		//
		//	"op" name=EString "(" (parameter+=Param ("," parameter+=Param)*)? ")";
		public ParserRule getRule() { return rule; }

		//"op" name=EString "(" (parameter+=Param ("," parameter+=Param)*)? ")"
		public Group getGroup() { return cGroup; }

		//"op"
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameter+=Param ("," parameter+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameter+=Param
		public Assignment getParameterAssignment_3_0() { return cParameterAssignment_3_0; }

		//Param
		public RuleCall getParameterParamParserRuleCall_3_0_0() { return cParameterParamParserRuleCall_3_0_0; }

		//("," parameter+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameter+=Param
		public Assignment getParameterAssignment_3_1_1() { return cParameterAssignment_3_1_1; }

		//Param
		public RuleCall getParameterParamParserRuleCall_3_1_1_0() { return cParameterParamParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataTypeDTypeEnumRuleCall_0_0 = (RuleCall)cDataTypeAssignment_0.eContents().get(0);
		private final Assignment cClassTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassTypeClassCrossReference_1_0 = (CrossReference)cClassTypeAssignment_1.eContents().get(0);
		private final RuleCall cClassTypeClassIDTerminalRuleCall_1_0_1 = (RuleCall)cClassTypeClassCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Param returns Parameter:
		//
		//	dataType=dType classType=[Class] name=EString;
		public ParserRule getRule() { return rule; }

		//dataType=dType classType=[Class] name=EString
		public Group getGroup() { return cGroup; }

		//dataType=dType
		public Assignment getDataTypeAssignment_0() { return cDataTypeAssignment_0; }

		//dType
		public RuleCall getDataTypeDTypeEnumRuleCall_0_0() { return cDataTypeDTypeEnumRuleCall_0_0; }

		//classType=[Class]
		public Assignment getClassTypeAssignment_1() { return cClassTypeAssignment_1; }

		//[Class]
		public CrossReference getClassTypeClassCrossReference_1_0() { return cClassTypeClassCrossReference_1_0; }

		//ID
		public RuleCall getClassTypeClassIDTerminalRuleCall_1_0_1() { return cClassTypeClassIDTerminalRuleCall_1_0_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class StMachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StMach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesSteParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesSteParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitialStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInitialStateStateCrossReference_5_0 = (CrossReference)cInitialStateAssignment_5.eContents().get(0);
		private final RuleCall cInitialStateStateIDTerminalRuleCall_5_0_1 = (RuleCall)cInitialStateStateCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * **************************************************************************** * /
		//
		/// *                        B E H A V I O R   M O D E L                           * /
		//
		/// * **************************************************************************** * / StMach returns StateMachine:
		//
		//	"stateMachine" "{" states+=Ste states+=Ste* "->" initialState=[State] "}";
		public ParserRule getRule() { return rule; }

		//"stateMachine" "{" states+=Ste states+=Ste* "->" initialState=[State] "}"
		public Group getGroup() { return cGroup; }

		//"stateMachine"
		public Keyword getStateMachineKeyword_0() { return cStateMachineKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//states+=Ste
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//Ste
		public RuleCall getStatesSteParserRuleCall_2_0() { return cStatesSteParserRuleCall_2_0; }

		//states+=Ste*
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//Ste
		public RuleCall getStatesSteParserRuleCall_3_0() { return cStatesSteParserRuleCall_3_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//initialState=[State]
		public Assignment getInitialStateAssignment_5() { return cInitialStateAssignment_5; }

		//[State]
		public CrossReference getInitialStateStateCrossReference_5_0() { return cInitialStateStateCrossReference_5_0; }

		//ID
		public RuleCall getInitialStateStateIDTerminalRuleCall_5_0_1() { return cInitialStateStateIDTerminalRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class SteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ste");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnEntryCallKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntryOperationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntryOperationEntOpParserRuleCall_2_1_0 = (RuleCall)cEntryOperationAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTransitionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTransitionsTransParserRuleCall_4_0_0 = (RuleCall)cTransitionsAssignment_4_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTransitionsTransParserRuleCall_4_1_0 = (RuleCall)cTransitionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Ste returns State:
		//
		//	"state" name=EString ("onEntryCall" entryOperation=EntOp)? "{" (transitions+=Trans transitions+=Trans*)? "}";
		public ParserRule getRule() { return rule; }

		//"state" name=EString ("onEntryCall" entryOperation=EntOp)? "{" (transitions+=Trans transitions+=Trans*)? "}"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("onEntryCall" entryOperation=EntOp)?
		public Group getGroup_2() { return cGroup_2; }

		//"onEntryCall"
		public Keyword getOnEntryCallKeyword_2_0() { return cOnEntryCallKeyword_2_0; }

		//entryOperation=EntOp
		public Assignment getEntryOperationAssignment_2_1() { return cEntryOperationAssignment_2_1; }

		//EntOp
		public RuleCall getEntryOperationEntOpParserRuleCall_2_1_0() { return cEntryOperationEntOpParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(transitions+=Trans transitions+=Trans*)?
		public Group getGroup_4() { return cGroup_4; }

		//transitions+=Trans
		public Assignment getTransitionsAssignment_4_0() { return cTransitionsAssignment_4_0; }

		//Trans
		public RuleCall getTransitionsTransParserRuleCall_4_0_0() { return cTransitionsTransParserRuleCall_4_0_0; }

		//transitions+=Trans*
		public Assignment getTransitionsAssignment_4_1() { return cTransitionsAssignment_4_1; }

		//Trans
		public RuleCall getTransitionsTransParserRuleCall_4_1_0() { return cTransitionsTransParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EntOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntOp");
		private final Assignment cCalledOperationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cCalledOperationOperationCrossReference_0 = (CrossReference)cCalledOperationAssignment.eContents().get(0);
		private final RuleCall cCalledOperationOperationIDTerminalRuleCall_0_1 = (RuleCall)cCalledOperationOperationCrossReference_0.eContents().get(1);
		
		//EntOp returns EntryOperation:
		//
		//	calledOperation=[Operation];
		public ParserRule getRule() { return rule; }

		//calledOperation=[Operation]
		public Assignment getCalledOperationAssignment() { return cCalledOperationAssignment; }

		//[Operation]
		public CrossReference getCalledOperationOperationCrossReference_0() { return cCalledOperationOperationCrossReference_0; }

		//ID
		public RuleCall getCalledOperationOperationIDTerminalRuleCall_0_1() { return cCalledOperationOperationIDTerminalRuleCall_0_1; }
	}

	public class TransElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trans");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventEvParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetStateCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnlessKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGuardAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGuardGuadParserRuleCall_3_1_0 = (RuleCall)cGuardAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cActionsActParserRuleCall_4_1_0 = (RuleCall)cActionsAssignment_4_1.eContents().get(0);
		private final Assignment cActionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cActionsActParserRuleCall_4_2_0 = (RuleCall)cActionsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Trans returns Transition:
		//
		//	event=Ev "=>" target=[State] ("unless" guard=Guad)? ("{" actions+=Act actions+=Act* "}")?;
		public ParserRule getRule() { return rule; }

		//event=Ev "=>" target=[State] ("unless" guard=Guad)? ("{" actions+=Act actions+=Act* "}")?
		public Group getGroup() { return cGroup; }

		//event=Ev
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//Ev
		public RuleCall getEventEvParserRuleCall_0_0() { return cEventEvParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//target=[State]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[State]
		public CrossReference getTargetStateCrossReference_2_0() { return cTargetStateCrossReference_2_0; }

		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_2_0_1() { return cTargetStateIDTerminalRuleCall_2_0_1; }

		//("unless" guard=Guad)?
		public Group getGroup_3() { return cGroup_3; }

		//"unless"
		public Keyword getUnlessKeyword_3_0() { return cUnlessKeyword_3_0; }

		//guard=Guad
		public Assignment getGuardAssignment_3_1() { return cGuardAssignment_3_1; }

		//Guad
		public RuleCall getGuardGuadParserRuleCall_3_1_0() { return cGuardGuadParserRuleCall_3_1_0; }

		//("{" actions+=Act actions+=Act* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//actions+=Act
		public Assignment getActionsAssignment_4_1() { return cActionsAssignment_4_1; }

		//Act
		public RuleCall getActionsActParserRuleCall_4_1_0() { return cActionsActParserRuleCall_4_1_0; }

		//actions+=Act*
		public Assignment getActionsAssignment_4_2() { return cActionsAssignment_4_2; }

		//Act
		public RuleCall getActionsActParserRuleCall_4_2_0() { return cActionsActParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}

	public class EvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ev");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOperationOperationCrossReference_0 = (CrossReference)cOperationAssignment.eContents().get(0);
		private final RuleCall cOperationOperationIDTerminalRuleCall_0_1 = (RuleCall)cOperationOperationCrossReference_0.eContents().get(1);
		
		//Ev returns Event:
		//
		//	operation=[Operation];
		public ParserRule getRule() { return rule; }

		//operation=[Operation]
		public Assignment getOperationAssignment() { return cOperationAssignment; }

		//[Operation]
		public CrossReference getOperationOperationCrossReference_0() { return cOperationOperationCrossReference_0; }

		//ID
		public RuleCall getOperationOperationIDTerminalRuleCall_0_1() { return cOperationOperationIDTerminalRuleCall_0_1; }
	}

	public class GuadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guad");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRefInStateCondParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamInStateCondParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Guad returns Guard:
		//
		//	refInStateCond | paramInStateCond;
		public ParserRule getRule() { return rule; }

		//refInStateCond | paramInStateCond
		public Alternatives getAlternatives() { return cAlternatives; }

		//refInStateCond
		public RuleCall getRefInStateCondParserRuleCall_0() { return cRefInStateCondParserRuleCall_0; }

		//paramInStateCond
		public RuleCall getParamInStateCondParserRuleCall_1() { return cParamInStateCondParserRuleCall_1; }
	}

	public class ActElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Act");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCRefOpActParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCParamOpActParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRefAssActParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Act returns Action:
		//
		//	cRefOpAct | cParamOpAct | refAssAct;
		public ParserRule getRule() { return rule; }

		//cRefOpAct | cParamOpAct | refAssAct
		public Alternatives getAlternatives() { return cAlternatives; }

		//cRefOpAct
		public RuleCall getCRefOpActParserRuleCall_0() { return cCRefOpActParserRuleCall_0; }

		//cParamOpAct
		public RuleCall getCParamOpActParserRuleCall_1() { return cCParamOpActParserRuleCall_1; }

		//refAssAct
		public RuleCall getRefAssActParserRuleCall_2() { return cRefAssActParserRuleCall_2; }
	}

	public class CRefOpActElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cRefOpAct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCallObjectViaReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCallObjectViaReferenceReferenceCrossReference_2_0 = (CrossReference)cCallObjectViaReferenceAssignment_2.eContents().get(0);
		private final RuleCall cCallObjectViaReferenceReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cCallObjectViaReferenceReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCalledOperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cCalledOperationOperationCrossReference_4_0 = (CrossReference)cCalledOperationAssignment_4.eContents().get(0);
		private final RuleCall cCalledOperationOperationIDTerminalRuleCall_4_0_1 = (RuleCall)cCalledOperationOperationCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParameterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParameterParamBindParserRuleCall_5_1_0 = (RuleCall)cParameterAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cParameterAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cParameterParamBindParserRuleCall_5_2_1_0 = (RuleCall)cParameterAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Actions
		//
		//cRefOpAct returns CallReferenceOperationAction:
		//
		//	"self" "->" callObjectViaReference=[Reference] "->" calledOperation=[Operation] ("(" parameter+=ParamBind (","
		//
		//	parameter+=ParamBind)* ")")? ";";
		public ParserRule getRule() { return rule; }

		//"self" "->" callObjectViaReference=[Reference] "->" calledOperation=[Operation] ("(" parameter+=ParamBind (","
		//
		//parameter+=ParamBind)* ")")? ";"
		public Group getGroup() { return cGroup; }

		//"self"
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//callObjectViaReference=[Reference]
		public Assignment getCallObjectViaReferenceAssignment_2() { return cCallObjectViaReferenceAssignment_2; }

		//[Reference]
		public CrossReference getCallObjectViaReferenceReferenceCrossReference_2_0() { return cCallObjectViaReferenceReferenceCrossReference_2_0; }

		//ID
		public RuleCall getCallObjectViaReferenceReferenceIDTerminalRuleCall_2_0_1() { return cCallObjectViaReferenceReferenceIDTerminalRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//calledOperation=[Operation]
		public Assignment getCalledOperationAssignment_4() { return cCalledOperationAssignment_4; }

		//[Operation]
		public CrossReference getCalledOperationOperationCrossReference_4_0() { return cCalledOperationOperationCrossReference_4_0; }

		//ID
		public RuleCall getCalledOperationOperationIDTerminalRuleCall_4_0_1() { return cCalledOperationOperationIDTerminalRuleCall_4_0_1; }

		//("(" parameter+=ParamBind ("," parameter+=ParamBind)* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//parameter+=ParamBind
		public Assignment getParameterAssignment_5_1() { return cParameterAssignment_5_1; }

		//ParamBind
		public RuleCall getParameterParamBindParserRuleCall_5_1_0() { return cParameterParamBindParserRuleCall_5_1_0; }

		//("," parameter+=ParamBind)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//parameter+=ParamBind
		public Assignment getParameterAssignment_5_2_1() { return cParameterAssignment_5_2_1; }

		//ParamBind
		public RuleCall getParameterParamBindParserRuleCall_5_2_1_0() { return cParameterParamBindParserRuleCall_5_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class CParamOpActElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cParamOpAct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCallObjectViaParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCallObjectViaParameterParameterCrossReference_0_0 = (CrossReference)cCallObjectViaParameterAssignment_0.eContents().get(0);
		private final RuleCall cCallObjectViaParameterParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cCallObjectViaParameterParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalledOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCalledOperationOperationCrossReference_2_0 = (CrossReference)cCalledOperationAssignment_2.eContents().get(0);
		private final RuleCall cCalledOperationOperationIDTerminalRuleCall_2_0_1 = (RuleCall)cCalledOperationOperationCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterParamBindParserRuleCall_3_1_0 = (RuleCall)cParameterAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParameterAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParameterParamBindParserRuleCall_3_2_1_0 = (RuleCall)cParameterAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//cParamOpAct returns CallParameterOperationAction:
		//
		//	callObjectViaParameter=[Parameter] "->" calledOperation=[Operation] ("(" parameter+=ParamBind (","
		//
		//	parameter+=ParamBind)* ")")? ";";
		public ParserRule getRule() { return rule; }

		//callObjectViaParameter=[Parameter] "->" calledOperation=[Operation] ("(" parameter+=ParamBind (","
		//
		//parameter+=ParamBind)* ")")? ";"
		public Group getGroup() { return cGroup; }

		//callObjectViaParameter=[Parameter]
		public Assignment getCallObjectViaParameterAssignment_0() { return cCallObjectViaParameterAssignment_0; }

		//[Parameter]
		public CrossReference getCallObjectViaParameterParameterCrossReference_0_0() { return cCallObjectViaParameterParameterCrossReference_0_0; }

		//ID
		public RuleCall getCallObjectViaParameterParameterIDTerminalRuleCall_0_0_1() { return cCallObjectViaParameterParameterIDTerminalRuleCall_0_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//calledOperation=[Operation]
		public Assignment getCalledOperationAssignment_2() { return cCalledOperationAssignment_2; }

		//[Operation]
		public CrossReference getCalledOperationOperationCrossReference_2_0() { return cCalledOperationOperationCrossReference_2_0; }

		//ID
		public RuleCall getCalledOperationOperationIDTerminalRuleCall_2_0_1() { return cCalledOperationOperationIDTerminalRuleCall_2_0_1; }

		//("(" parameter+=ParamBind ("," parameter+=ParamBind)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//parameter+=ParamBind
		public Assignment getParameterAssignment_3_1() { return cParameterAssignment_3_1; }

		//ParamBind
		public RuleCall getParameterParamBindParserRuleCall_3_1_0() { return cParameterParamBindParserRuleCall_3_1_0; }

		//("," parameter+=ParamBind)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//parameter+=ParamBind
		public Assignment getParameterAssignment_3_2_1() { return cParameterAssignment_3_2_1; }

		//ParamBind
		public RuleCall getParameterParamBindParserRuleCall_3_2_1_0() { return cParameterParamBindParserRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RefAssActElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "refAssAct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReferenceReferenceCrossReference_2_0 = (CrossReference)cReferenceAssignment_2.eContents().get(0);
		private final RuleCall cReferenceReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cReferenceReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParameterParameterCrossReference_4_0 = (CrossReference)cParameterAssignment_4.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cParameterParameterCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//refAssAct returns ReferenceAssignmentAction:
		//
		//	"self" "->" reference=[Reference] "=" parameter=[Parameter] ";";
		public ParserRule getRule() { return rule; }

		//"self" "->" reference=[Reference] "=" parameter=[Parameter] ";"
		public Group getGroup() { return cGroup; }

		//"self"
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//reference=[Reference]
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }

		//[Reference]
		public CrossReference getReferenceReferenceCrossReference_2_0() { return cReferenceReferenceCrossReference_2_0; }

		//ID
		public RuleCall getReferenceReferenceIDTerminalRuleCall_2_0_1() { return cReferenceReferenceIDTerminalRuleCall_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_4_0() { return cParameterParameterCrossReference_4_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_4_0_1() { return cParameterParameterIDTerminalRuleCall_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ParamBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamBind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterBindingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterBindingParameterCrossReference_0_0 = (CrossReference)cParameterBindingAssignment_0.eContents().get(0);
		private final RuleCall cParameterBindingParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterBindingParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStructuralFeatureBindingAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cStructuralFeatureBindingStructuralFeatureCrossReference_2_0_0 = (CrossReference)cStructuralFeatureBindingAssignment_2_0.eContents().get(0);
		private final RuleCall cStructuralFeatureBindingStructuralFeatureIDTerminalRuleCall_2_0_0_1 = (RuleCall)cStructuralFeatureBindingStructuralFeatureCrossReference_2_0_0.eContents().get(1);
		private final Keyword cSelfKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//ParamBind returns ParameterBinding:
		//
		//	parameterBinding=[Parameter] "=" (structuralFeatureBinding=[StructuralFeature] | "self");
		public ParserRule getRule() { return rule; }

		//parameterBinding=[Parameter] "=" (structuralFeatureBinding=[StructuralFeature] | "self")
		public Group getGroup() { return cGroup; }

		//parameterBinding=[Parameter]
		public Assignment getParameterBindingAssignment_0() { return cParameterBindingAssignment_0; }

		//[Parameter]
		public CrossReference getParameterBindingParameterCrossReference_0_0() { return cParameterBindingParameterCrossReference_0_0; }

		//ID
		public RuleCall getParameterBindingParameterIDTerminalRuleCall_0_0_1() { return cParameterBindingParameterIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//structuralFeatureBinding=[StructuralFeature] | "self"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//structuralFeatureBinding=[StructuralFeature]
		public Assignment getStructuralFeatureBindingAssignment_2_0() { return cStructuralFeatureBindingAssignment_2_0; }

		//[StructuralFeature]
		public CrossReference getStructuralFeatureBindingStructuralFeatureCrossReference_2_0_0() { return cStructuralFeatureBindingStructuralFeatureCrossReference_2_0_0; }

		//ID
		public RuleCall getStructuralFeatureBindingStructuralFeatureIDTerminalRuleCall_2_0_0_1() { return cStructuralFeatureBindingStructuralFeatureIDTerminalRuleCall_2_0_0_1; }

		//"self"
		public Keyword getSelfKeyword_2_1() { return cSelfKeyword_2_1; }
	}

	public class RefInStateCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "refInStateCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReferenceReferenceCrossReference_2_0 = (CrossReference)cReferenceAssignment_2.eContents().get(0);
		private final RuleCall cReferenceReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cReferenceReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cInStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInStateStateCrossReference_4_0 = (CrossReference)cInStateAssignment_4.eContents().get(0);
		private final RuleCall cInStateStateIDTerminalRuleCall_4_0_1 = (RuleCall)cInStateStateCrossReference_4_0.eContents().get(1);
		
		//// Guards
		//
		//refInStateCond returns ReferenceIsInStateCondition:
		//
		//	"self" "->" reference=[Reference] "inState" inState=[State];
		public ParserRule getRule() { return rule; }

		//"self" "->" reference=[Reference] "inState" inState=[State]
		public Group getGroup() { return cGroup; }

		//"self"
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//reference=[Reference]
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }

		//[Reference]
		public CrossReference getReferenceReferenceCrossReference_2_0() { return cReferenceReferenceCrossReference_2_0; }

		//ID
		public RuleCall getReferenceReferenceIDTerminalRuleCall_2_0_1() { return cReferenceReferenceIDTerminalRuleCall_2_0_1; }

		//"inState"
		public Keyword getInStateKeyword_3() { return cInStateKeyword_3; }

		//inState=[State]
		public Assignment getInStateAssignment_4() { return cInStateAssignment_4; }

		//[State]
		public CrossReference getInStateStateCrossReference_4_0() { return cInStateStateCrossReference_4_0; }

		//ID
		public RuleCall getInStateStateIDTerminalRuleCall_4_0_1() { return cInStateStateIDTerminalRuleCall_4_0_1; }
	}

	public class ParamInStateCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInStateCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterParameterCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cInStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInStateStateCrossReference_2_0 = (CrossReference)cInStateAssignment_2.eContents().get(0);
		private final RuleCall cInStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cInStateStateCrossReference_2_0.eContents().get(1);
		
		//paramInStateCond returns ParameterIsInStateCondition:
		//
		//	parameter=[Parameter] "inState" inState=[State];
		public ParserRule getRule() { return rule; }

		//parameter=[Parameter] "inState" inState=[State]
		public Group getGroup() { return cGroup; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0_0() { return cParameterParameterCrossReference_0_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_0_1() { return cParameterParameterIDTerminalRuleCall_0_0_1; }

		//"inState"
		public Keyword getInStateKeyword_1() { return cInStateKeyword_1; }

		//inState=[State]
		public Assignment getInStateAssignment_2() { return cInStateAssignment_2; }

		//[State]
		public CrossReference getInStateStateCrossReference_2_0() { return cInStateStateCrossReference_2_0; }

		//ID
		public RuleCall getInStateStateIDTerminalRuleCall_2_0_1() { return cInStateStateIDTerminalRuleCall_2_0_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class DTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "dType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cComplexEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cComplexComplexClassKeyword_3_0 = (Keyword)cComplexEnumLiteralDeclaration_3.eContents().get(0);
		
		/// * **************************************************************************** * /
		//
		/// *                        T Y P E   D E F I N I T I O N                         * /
		//
		/// * **************************************************************************** * / enum dType returns DataType:
		//
		//	String | Integer | Boolean | Complex="Complex Class";
		public EnumRule getRule() { return rule; }

		//String | Integer | Boolean | Complex="Complex Class"
		public Alternatives getAlternatives() { return cAlternatives; }

		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }

		//"String"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }

		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"Integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }

		//"Boolean"
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }

		//Complex="Complex Class"
		public EnumLiteralDeclaration getComplexEnumLiteralDeclaration_3() { return cComplexEnumLiteralDeclaration_3; }

		//"Complex Class"
		public Keyword getComplexComplexClassKeyword_3_0() { return cComplexComplexClassKeyword_3_0; }
	}
	
	private PkgElements pPkg;
	private ClsElements pCls;
	private StructFeatElements pStructFeat;
	private AttrElements pAttr;
	private RefElements pRef;
	private OpElements pOp;
	private ParamElements pParam;
	private StMachElements pStMach;
	private SteElements pSte;
	private EntOpElements pEntOp;
	private TransElements pTrans;
	private EvElements pEv;
	private GuadElements pGuad;
	private ActElements pAct;
	private CRefOpActElements pCRefOpAct;
	private CParamOpActElements pCParamOpAct;
	private RefAssActElements pRefAssAct;
	private ParamBindElements pParamBind;
	private RefInStateCondElements pRefInStateCond;
	private ParamInStateCondElements pParamInStateCond;
	private DTypeElements unknownRuleDType;
	private EStringElements pEString;
	private EIntElements pEInt;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SOOMLDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.me.sw11.SOOMLDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * **************************************************************************** * /
	//
	/// *                      S T R U C T U R E   M O D E L                           * /
	//
	/// * **************************************************************************** * / Pkg returns Package:
	//
	//	"package" name=EString "{" (classes+=Cls classes+=Cls*)? (packages+=Pkg packages+=Pkg*)? "}";
	public PkgElements getPkgAccess() {
		return (pPkg != null) ? pPkg : (pPkg = new PkgElements());
	}
	
	public ParserRule getPkgRule() {
		return getPkgAccess().getRule();
	}

	//Cls returns Class:
	//
	//	"class" name=EString "{" (features+=StructFeat features+=StructFeat*)? (operations+=Op operations+=Op*)?
	//
	//	stateMachine=StMach "}";
	public ClsElements getClsAccess() {
		return (pCls != null) ? pCls : (pCls = new ClsElements());
	}
	
	public ParserRule getClsRule() {
		return getClsAccess().getRule();
	}

	//StructFeat returns StructuralFeature:
	//
	//	Attr | Ref;
	public StructFeatElements getStructFeatAccess() {
		return (pStructFeat != null) ? pStructFeat : (pStructFeat = new StructFeatElements());
	}
	
	public ParserRule getStructFeatRule() {
		return getStructFeatAccess().getRule();
	}

	//Attr returns Attribute:
	//
	//	"att" dataType=dType name=EString ("(" lowerBound=EInt ".." upperBound=EInt ")")?;
	public AttrElements getAttrAccess() {
		return (pAttr != null) ? pAttr : (pAttr = new AttrElements());
	}
	
	public ParserRule getAttrRule() {
		return getAttrAccess().getRule();
	}

	//Ref returns Reference:
	//
	//	"ref" type=[Class] name=EString "(" lowerBound=EInt ".." upperBound=EInt ")" ("oppositeOf" opposite=[Reference])?;
	public RefElements getRefAccess() {
		return (pRef != null) ? pRef : (pRef = new RefElements());
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}

	//Op returns Operation:
	//
	//	"op" name=EString "(" (parameter+=Param ("," parameter+=Param)*)? ")";
	public OpElements getOpAccess() {
		return (pOp != null) ? pOp : (pOp = new OpElements());
	}
	
	public ParserRule getOpRule() {
		return getOpAccess().getRule();
	}

	//Param returns Parameter:
	//
	//	dataType=dType classType=[Class] name=EString;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	/// * **************************************************************************** * /
	//
	/// *                        B E H A V I O R   M O D E L                           * /
	//
	/// * **************************************************************************** * / StMach returns StateMachine:
	//
	//	"stateMachine" "{" states+=Ste states+=Ste* "->" initialState=[State] "}";
	public StMachElements getStMachAccess() {
		return (pStMach != null) ? pStMach : (pStMach = new StMachElements());
	}
	
	public ParserRule getStMachRule() {
		return getStMachAccess().getRule();
	}

	//Ste returns State:
	//
	//	"state" name=EString ("onEntryCall" entryOperation=EntOp)? "{" (transitions+=Trans transitions+=Trans*)? "}";
	public SteElements getSteAccess() {
		return (pSte != null) ? pSte : (pSte = new SteElements());
	}
	
	public ParserRule getSteRule() {
		return getSteAccess().getRule();
	}

	//EntOp returns EntryOperation:
	//
	//	calledOperation=[Operation];
	public EntOpElements getEntOpAccess() {
		return (pEntOp != null) ? pEntOp : (pEntOp = new EntOpElements());
	}
	
	public ParserRule getEntOpRule() {
		return getEntOpAccess().getRule();
	}

	//Trans returns Transition:
	//
	//	event=Ev "=>" target=[State] ("unless" guard=Guad)? ("{" actions+=Act actions+=Act* "}")?;
	public TransElements getTransAccess() {
		return (pTrans != null) ? pTrans : (pTrans = new TransElements());
	}
	
	public ParserRule getTransRule() {
		return getTransAccess().getRule();
	}

	//Ev returns Event:
	//
	//	operation=[Operation];
	public EvElements getEvAccess() {
		return (pEv != null) ? pEv : (pEv = new EvElements());
	}
	
	public ParserRule getEvRule() {
		return getEvAccess().getRule();
	}

	//Guad returns Guard:
	//
	//	refInStateCond | paramInStateCond;
	public GuadElements getGuadAccess() {
		return (pGuad != null) ? pGuad : (pGuad = new GuadElements());
	}
	
	public ParserRule getGuadRule() {
		return getGuadAccess().getRule();
	}

	//Act returns Action:
	//
	//	cRefOpAct | cParamOpAct | refAssAct;
	public ActElements getActAccess() {
		return (pAct != null) ? pAct : (pAct = new ActElements());
	}
	
	public ParserRule getActRule() {
		return getActAccess().getRule();
	}

	//// Actions
	//
	//cRefOpAct returns CallReferenceOperationAction:
	//
	//	"self" "->" callObjectViaReference=[Reference] "->" calledOperation=[Operation] ("(" parameter+=ParamBind (","
	//
	//	parameter+=ParamBind)* ")")? ";";
	public CRefOpActElements getCRefOpActAccess() {
		return (pCRefOpAct != null) ? pCRefOpAct : (pCRefOpAct = new CRefOpActElements());
	}
	
	public ParserRule getCRefOpActRule() {
		return getCRefOpActAccess().getRule();
	}

	//cParamOpAct returns CallParameterOperationAction:
	//
	//	callObjectViaParameter=[Parameter] "->" calledOperation=[Operation] ("(" parameter+=ParamBind (","
	//
	//	parameter+=ParamBind)* ")")? ";";
	public CParamOpActElements getCParamOpActAccess() {
		return (pCParamOpAct != null) ? pCParamOpAct : (pCParamOpAct = new CParamOpActElements());
	}
	
	public ParserRule getCParamOpActRule() {
		return getCParamOpActAccess().getRule();
	}

	//refAssAct returns ReferenceAssignmentAction:
	//
	//	"self" "->" reference=[Reference] "=" parameter=[Parameter] ";";
	public RefAssActElements getRefAssActAccess() {
		return (pRefAssAct != null) ? pRefAssAct : (pRefAssAct = new RefAssActElements());
	}
	
	public ParserRule getRefAssActRule() {
		return getRefAssActAccess().getRule();
	}

	//ParamBind returns ParameterBinding:
	//
	//	parameterBinding=[Parameter] "=" (structuralFeatureBinding=[StructuralFeature] | "self");
	public ParamBindElements getParamBindAccess() {
		return (pParamBind != null) ? pParamBind : (pParamBind = new ParamBindElements());
	}
	
	public ParserRule getParamBindRule() {
		return getParamBindAccess().getRule();
	}

	//// Guards
	//
	//refInStateCond returns ReferenceIsInStateCondition:
	//
	//	"self" "->" reference=[Reference] "inState" inState=[State];
	public RefInStateCondElements getRefInStateCondAccess() {
		return (pRefInStateCond != null) ? pRefInStateCond : (pRefInStateCond = new RefInStateCondElements());
	}
	
	public ParserRule getRefInStateCondRule() {
		return getRefInStateCondAccess().getRule();
	}

	//paramInStateCond returns ParameterIsInStateCondition:
	//
	//	parameter=[Parameter] "inState" inState=[State];
	public ParamInStateCondElements getParamInStateCondAccess() {
		return (pParamInStateCond != null) ? pParamInStateCond : (pParamInStateCond = new ParamInStateCondElements());
	}
	
	public ParserRule getParamInStateCondRule() {
		return getParamInStateCondAccess().getRule();
	}

	/// * **************************************************************************** * /
	//
	/// *                        T Y P E   D E F I N I T I O N                         * /
	//
	/// * **************************************************************************** * / enum dType returns DataType:
	//
	//	String | Integer | Boolean | Complex="Complex Class";
	public DTypeElements getDTypeAccess() {
		return (unknownRuleDType != null) ? unknownRuleDType : (unknownRuleDType = new DTypeElements());
	}
	
	public EnumRule getDTypeRule() {
		return getDTypeAccess().getRule();
	}

	//EString returns ecore::EString:
	//
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
