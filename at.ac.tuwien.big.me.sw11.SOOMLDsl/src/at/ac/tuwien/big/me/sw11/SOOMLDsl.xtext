// automatically generated by Xtext
grammar at.ac.tuwien.big.me.sw11.SOOMLDsl with org.eclipse.xtext.common.Terminals 
	hidden(WS, ML_COMMENT, SL_COMMENT) // comment terminal symbols are not handed to the parser
	
// import our SOOML model
// import "platform:/resource/ME_WS11_Lab1/model/sooml.ecore" 
import "http://www.big.tuwien.ac.at/me/ws11/sooml" 

// Import Ecore types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/* **************************************************************************** */
/*                      S T R U C T U R E   M O D E L                           */
/* **************************************************************************** */

Pkg returns Package:
	'package' name=EString
	'{'
		( classes+=Cls ( classes+=Cls)* )?
		( packages+=Pkg ( packages+=Pkg)* )?
    '}';
    
Cls returns Class: 
	'class'	name=EString
	'{'
		( features+=StructFeat ( features+=StructFeat)* )?
		( operations+=Op ( operations+=Op)* )?
		stateMachine=StMach
    '}';

StructFeat returns StructuralFeature:
	Attr | Ref;

Attr returns Attribute:
	'att' dataType=dType name=EString ('(' lowerBound=EInt '..' upperBound=EInt ')')?;

Ref returns Reference:
	'ref' type=[Class] name=EString	'(' lowerBound=EInt '..' upperBound=EInt ')' ('oppositeOf' opposite=[Reference])?;

Op returns Operation:
	'op' name=EString '(' ( parameter+=Param ( "," parameter+=Param)* )? ')';

Param returns Parameter:
	dataType=dType classType=[Class] name=EString;

/* **************************************************************************** */
/*                        B E H A V I O R   M O D E L                           */
/* **************************************************************************** */

StMach returns StateMachine:
	'stateMachine'
	'{'
		states+=Ste ( states+=Ste)* 
		'->' initialState=[State]
    '}';

Ste returns State:
	'state'	name=EString ('onEntryCall' entryOperation=EntOp)?
	'{'	(transitions+=Trans ( transitions+=Trans)*)? '}';
  
EntOp returns EntryOperation:
	calledOperation=[Operation];

Trans returns Transition:
	event=Ev '=>' target=[State] 
	('unless' guard=Guad)?
	( '{' actions+=Act ( actions+=Act)* '}')?;
	
Ev returns Event:
	operation=[Operation];

Guad returns Guard:
	refInStateCond | paramInStateCond;

Act returns Action:
	cRefOpAct | cParamOpAct | refAssAct;

// Actions
cRefOpAct returns CallReferenceOperationAction:
	'self' '->' callObjectViaReference=[Reference] '->' calledOperation=[Operation]
	('(' parameter+=ParamBind ( "," parameter+=ParamBind)* ')')? ';';

cParamOpAct returns CallParameterOperationAction:
	callObjectViaParameter=[Parameter] '->' calledOperation=[Operation] 
	('(' parameter+=ParamBind ( "," parameter+=ParamBind)* ')')? ';';

refAssAct returns ReferenceAssignmentAction:
	'self' '->' reference=[Reference] '=' parameter=[Parameter] ';';

ParamBind returns ParameterBinding:
	parameterBinding=[Parameter] '=' (structuralFeatureBinding=[StructuralFeature] | 'self');

// Guards
refInStateCond returns ReferenceIsInStateCondition:
	'self' '->' reference=[Reference] 'inState' inState=[State];

paramInStateCond returns ParameterIsInStateCondition:
	parameter=[Parameter] 'inState' inState=[State];

/* **************************************************************************** */
/*                        T Y P E   D E F I N I T I O N                         */
/* **************************************************************************** */
	
enum dType returns DataType:
	String = 'String' | Integer = 'Integer' | Boolean = 'Boolean' | Complex = 'Complex Class';

EString returns ecore::EString:
	STRING | ID;
	
EInt returns ecore::EInt:
	'-'? INT;